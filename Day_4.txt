//function overloading(Multiplication)
using System;
					
public class Program
{
	int a=2,b=4;
	public void Mul()
	{
		Console.WriteLine("Multiplication is: " +(a*b));
	}
	
	public void Mul(int a,int b)
	{
		Console.WriteLine("Multiplication is: " +(a*b));
	}
	
	public int Mul(int a,int b,int c)
	{
		return (a*b);
	}
	
	public void Mul(string a,string b)
	{
		Console.WriteLine("Multiplication is: " +(Convert.ToInt32(a)+Convert.ToInt32(b)));
	}
	
	public static void Main()
	{
	Program p=new Program();
		p.Mul();
		p.Mul(1,2);
		Console.WriteLine(p.Mul(1,2,3));
		p.Mul("5","4");
	}
}

Output:
Multiplication is: 8
Multiplication is: 2
2
Multiplication is: 9

-------------------------------------------------------------------------------------------------------------------
//Operator Overloading(Multiplication)

using System;
					
public class Mul
{
	public int n1,n2;
	public Mul(int n1,int n2)
	{
		this.n1=n1;
		this.n2=n2;
	}
	public static Mul operator * (Mul M1,Mul M2)
	{
		Mul M3=new Mul(0,0);
		M3.n1=M1.n1 * M2.n1;
		M3.n2=M1.n2 * M2.n2;
		return M3;
	}
}
	public class Class1
	{
	public static void Main()
	{
	    Mul M1=new Mul(6,5);
		Mul M2=new Mul(2,2);
		Mul M3=new Mul(0,0);
		Console.WriteLine("Values before sum Number 1: " + M3.n1 + " Number 2: " + M3.n2);
		M3=M1*M2;
		Console.WriteLine("Values after sum Number 1: " + M3.n1 + " Number 2: " + M3.n2);
		Console.ReadLine();
	}
}

Output:
Values before sum Number 1: 0 Number 2: 0
Values after sum Number 1: 12 Number 2: 10

-------------------------------------------------------------------------------------------------------------------
//virtual and override class 

public class BaseClass{
public virtual void Print(){
Console.WriteLine("Base Class");
}
}
public class
DerivedClass:BaseClass
{
public override void Print()
{
Console.WriteLine("Derived Class");
}
}
public class Class1
{
public static void Main()
{
BaseClass baseclass=new BaseClass();
baseclass.Print();
baseclass=new DerivedClass();
Console.ReadLine();
}
}



--------------------------------------------------------------------------------------------------------------------
//Base derived class
using System;					
public class ClassA
{
 int n1, n2;
 public ClassA()
  {
     Console.WriteLine("I am Base class Constructor");
  }
 public ClassA(int i, int j)
  {
     n1 = i;
     n2 = j;
     Console.WriteLine("Parameterized Constructor Invoked");
	 Console.WriteLine("Values are" + n1 + " and " + n2);
  }
public virtual void Swap()
 {
     Console.WriteLine("Hi I am swap Function ");
 }

  }
 
    public class DerivedClass : ClassA
    {
     public DerivedClass() : base() { }
     public DerivedClass(int i,int j) : base(i, j) {
     base.Swap();
    }
   }

    public class Class3
   {
      public static void Main()
    {
     DerivedClass d = new DerivedClass();
     DerivedClass d2 = new DerivedClass(10, 20);
     Console.ReadLine();
    }
   }

Output:
I am Base class Constructor
Parameterized Constructor Invoked
Values are10 and 20
Hi I am swap Function

-------------------------------------------------------------------------------------------------------------------

Create a C# program that prompts the user for three names of people and stores them in an array of Person-type 
objects. There will be two people of the Student type and one person of the Teacher type.
To do this, create a Person class that has a Name property of type string, a constructor that receives the name as
a parameter and overrides the ToString () method.
Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The 
Student class has a Study method that writes by console that the student is studying. The Teacher class will have 
an Explain method that writes to the console that the teacher is explaining. Remember to also create two 
constructors on the child classes that call the parent constructor of the Person class.
End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

using System;
 
public class InheritanceObjects
{
    public static void Main(string[] args)
    {
        int total = 3;
        Person[] persons = new Person[total];
 
        for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
                persons[i] = new Teacher(Console.ReadLine());
            }
            else
            {
                persons[i] = new Student(Console.ReadLine());
            }
        }
     for (int i = 0; i < total; i++)
        {
            if (i == 0)
            {
               ((Teacher)persons[i]).Explain();
 
            }
            else
            {
                ((Student)persons[i]).Study();
            }
        }
    }
 public class Person
    {
        protected string Name { get; set; }
 
        public Person(string name)
        {
            Name = name;
        }
 
        public override string ToString()
        {
            return "Hello! My name is " + Name;
        }
 
        ~Person()
        {
            Name = string.Empty;
        }
    }
   public class Teacher : Person
    {
        public Teacher(string name) : base(name)
        {
            Name = name;
        }
 
        public void Explain()
        {
            Console.WriteLine("Explain");
        }
    }
 
    public class Student : Person
    {
        public Student(string name) : base(name)
        {
            Name = name;
        }
  public void Study()
        {
            Console.WriteLine("Study");
        }
    }
}

Input:
Juan
Sara
Carlos
Output:
Explain
Study
Study

----------------------------------------------------------------------------------------------------------

using Systems;
class Shape
{
 public double Area()
 {
   return 0;
  }
 public double Perimeter()
 {
   return 0;
 }
}
class Rectangle:Shape
{
 double side1,side2;
 public Rectangle(double side1,double side2)
  {
    this.side1=side1;
    this.side2=side2;
   }
 public double Area()
  {
    return side1*side2;
  }
 public double perimeter()
  {
   return(2*(side1+side2));
  }
}
class Circle:Shape
{
 double radius;
 public Circle(double radius)
  {
    this.radius=radius;
  }
 public double Area()
  {
    return((22/7)*(radius*radius));
  }
 public double Perimeter()
  {
    return(2*(22/7)*radius);
  }
class Class11
{
public static void Main()
{
 Rectangle r=new Rectangle(3.5,2.5);
 Console.WriteLine("Area of rectangle:" + r.Area());
 Console.WriteLine("Perimeter of rectangle:" + r.Perimeter());
 console.WriteLine();

 Circle c=new Circle(2.5);
 Console.WriteLine("Area of circle:" + c.Area());
 Console.WriteLine("Perimeter of circle:" + c.Perimeter());
 console.ReadLine();
}
}
-------------------------------------------------------------------------------------------------------------------

Create a C# program that prompts the user for three names of people and stores them in an array of Person-type 
objects. There will be two people of the Student type and one person of the Teacher type.
To do this, create a Person class that has a Name property of type string, a constructor that receives the name as
a parameter and overrides the ToString () method.
Then create two more classes that inherit from the Person class, they will be called Student and Teacher. The 
Student class has a Study method that writes by console that the student is studying. The Teacher class will have 
an Explain method that writes to the console that the teacher is explaining. Remember to also create two 
constructors on the child classes that call the parent constructor of the Person class.
End the program by reading the people (the teacher and the students) and execute the Explain and Study methods.

using System;

 using System.Collections.Generic;

 using System.Linq;

 using System.Text;

 using System.Threading.Tasks;
 
namespace Day_4

 {

     public class Person

     {

         public string Name { get; set; }

         public Person(string Name)

         {

             this.Name = Name;

         }

         public override string ToString()

         {

             return "Hello! My name is "+Name; 

         }

         ~Person()

         {

             Name = string.Empty;

         }

     }

     public class Teacher:Person

     {

         public Teacher(string name):base(name)

         {

             Name = name;

         }

         public void Explain()

         {

             Console.WriteLine("Explain");

         }

     }

     public class Student:Person

     {

         public Student(string name) : base(name)

         {

             Name = name;

         }

         public void Study()

         {

             Console.WriteLine("Study");

         }

     }
 
    class Class4

     {

         public static void Main()

         {
 
            int Total = 3;
 
            Person[] people = new Person[Total];

             int[] a = new int[2];
 
            for (int i = 0; i < Total; i++)

             {

                 if(i==0)

                 {

                     people[i] = new Teacher(Console.ReadLine());
 
                }

                 else

                 {

                     people[i] = new Student(Console.ReadLine());

                 }
 
            }

             for (int i = 0; i < Total; i++)

             {

                 if(i==0)

                 {

                     ((Teacher)people[i]).Explain();

                     float p=(float)a[0];

                 }

                 else

                 {

                     ((Student)people[i]).Study();

                 }

             }

             Console.ReadLine();

         }

     }

 }



